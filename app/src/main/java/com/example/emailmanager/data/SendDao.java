package com.example.emailmanager.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEND".
*/
public class SendDao extends AbstractDao<Send, Long> {

    public static final String TABLENAME = "SEND";

    /**
     * Properties of entity Send.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Protocol = new Property(1, String.class, "protocol", false, "PROTOCOL");
        public final static Property HostKey = new Property(2, String.class, "hostKey", false, "HOST_KEY");
        public final static Property HostValue = new Property(3, String.class, "hostValue", false, "HOST_VALUE");
        public final static Property PortKey = new Property(4, String.class, "portKey", false, "PORT_KEY");
        public final static Property PortValue = new Property(5, String.class, "portValue", false, "PORT_VALUE");
        public final static Property EncryptKey = new Property(6, String.class, "encryptKey", false, "ENCRYPT_KEY");
        public final static Property EncryptValue = new Property(7, boolean.class, "encryptValue", false, "ENCRYPT_VALUE");
    }


    public SendDao(DaoConfig config) {
        super(config);
    }
    
    public SendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"PROTOCOL\" TEXT," + // 1: protocol
                "\"HOST_KEY\" TEXT," + // 2: hostKey
                "\"HOST_VALUE\" TEXT," + // 3: hostValue
                "\"PORT_KEY\" TEXT," + // 4: portKey
                "\"PORT_VALUE\" TEXT," + // 5: portValue
                "\"ENCRYPT_KEY\" TEXT," + // 6: encryptKey
                "\"ENCRYPT_VALUE\" INTEGER NOT NULL );"); // 7: encryptValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Send entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String protocol = entity.getProtocol();
        if (protocol != null) {
            stmt.bindString(2, protocol);
        }
 
        String hostKey = entity.getHostKey();
        if (hostKey != null) {
            stmt.bindString(3, hostKey);
        }
 
        String hostValue = entity.getHostValue();
        if (hostValue != null) {
            stmt.bindString(4, hostValue);
        }
 
        String portKey = entity.getPortKey();
        if (portKey != null) {
            stmt.bindString(5, portKey);
        }
 
        String portValue = entity.getPortValue();
        if (portValue != null) {
            stmt.bindString(6, portValue);
        }
 
        String encryptKey = entity.getEncryptKey();
        if (encryptKey != null) {
            stmt.bindString(7, encryptKey);
        }
        stmt.bindLong(8, entity.getEncryptValue() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Send entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String protocol = entity.getProtocol();
        if (protocol != null) {
            stmt.bindString(2, protocol);
        }
 
        String hostKey = entity.getHostKey();
        if (hostKey != null) {
            stmt.bindString(3, hostKey);
        }
 
        String hostValue = entity.getHostValue();
        if (hostValue != null) {
            stmt.bindString(4, hostValue);
        }
 
        String portKey = entity.getPortKey();
        if (portKey != null) {
            stmt.bindString(5, portKey);
        }
 
        String portValue = entity.getPortValue();
        if (portValue != null) {
            stmt.bindString(6, portValue);
        }
 
        String encryptKey = entity.getEncryptKey();
        if (encryptKey != null) {
            stmt.bindString(7, encryptKey);
        }
        stmt.bindLong(8, entity.getEncryptValue() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Send readEntity(Cursor cursor, int offset) {
        Send entity = new Send( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // protocol
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hostKey
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hostValue
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // portKey
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // portValue
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // encryptKey
            cursor.getShort(offset + 7) != 0 // encryptValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Send entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setProtocol(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHostKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHostValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPortKey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPortValue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEncryptKey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEncryptValue(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Send entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Send entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Send entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
